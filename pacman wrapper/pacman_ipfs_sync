#!/bin/bash

set -e

# install in /root/bin
#
# purpose of this script is to refresh the database files for pacman
# from an ipns mount, to circumvent the limitation of pacman to be unable to
# read databases from multiple folders
#
# all files located in the local pacman cache will be added to ipfs to clean
# up the local pkg cache and also share non-standard packages with ipfs
#
# available arguments:
# --skip-db-sync = skips the update of db files from IPFS

# dependencies:
# - a running ipfs

### config ###

# pacman cache dir
pacman_cache='/var/cache/pacman/pkg'

# pacman db dir
pacman_db='/var/lib/pacman'

# pacman configuration file
pacman_conf='/etc/pacman.conf'

# pacman lock file
pacman_lock='/var/lib/pacman/db.lck'

# folder where the ipns is mounted
ipns_mount='/ipns'

# user which runs the ipfs daemon
ipfs_user='ipfs'

# linux distribution identifier
dist_id='arch'

# architecture identifier
arch_id='x86_64'

# repo identifier
repo_id='default'

### end of config ###



# argument variables
SKIP_DB_SYNC=0
SKIP_CACHE_WIPE=0

# simple one argument decoding

if [ -n "$1" ]; then
	if [ "$1" == '--skip-db-sync' ]; then
		SKIP_DB_SYNC=1
	elif [ "$1" == '--db-sync' ]; then
		SKIP_DB_SYNC=0
	else
		fail "unexpected first argument" 100
	fi
fi

if [ -n "$2" ]; then
	if [ "$2" == '--skip-cache-wipe' ]; then
		SKIP_CACHE_WIPE=1
	elif [ "$2" == '--cache-wipe' ]; then
		SKIP_CACHE_WIPE=0
	else
		fail "unexpected first argument" 100
	fi
fi

# local functions

function fail {
	[ -n "$3" ] && [ "$3" == '-n' ] && printf '\n'
	[ -n "$3" ] && [ "$3" == '-2n' ] && printf '\n\n'
    printf 'Error: %s\n' "$1" >&2
    exit "${2-1}"
}

# startup message
echo "starting pacman-ipfs-sync..."

# check config


[ -z "$pacman_cache" ] && fail "pacman cache dir config string is empty" 10
[ -z "$pacman_db" ] && fail "pacman db dir config string is empty" 11
[ -z "$ipfs_user" ] && fail "ipfs user config string is empty" 12
[ -z "$dist_id" ] && fail "distribution identifier config string is empty" 13
[ -z "$arch_id" ] && fail "architecture identifier config string is empty" 14
[ -z "$repo_id" ] && fail "repository identifier config string is empty" 15
[ -z "$pacman_conf" ] && fail "pacman configuration file config string is empty" 16
[ -z "$pacman_lock" ] && fail "pacman lock file config string is empty" 17
[ -d "$pacman_cache" ] || fail "pacman cache dir could not be located" 50
[ -d "$ipns_mount" ] || fail "ipns mount dir could not be located" 51
[ -f "$pacman_conf" ] || fail "pacman configuration file could not be located" 52

[ "$(whoami)" == 'root' ] || fail "this script must be run by root"

# read '#IPFS_SYNC' line from pacman config
repos_to_sync=("$(grep '^#IPFS_SYNC' < "$pacman_conf" | cut -d'=' -f2)")

id -u "$ipfs_user" > /dev/null 2>&1 || fail "configured local user '$ipfs_user' does not exist" 150

su "$ipfs_user" --login -c "which 'ipfs' > /dev/null 2>&1" || fail "ipfs is not installed for user '$ipfs_user'" 150
[ "$(ps aux | grep "^${ipfs_user}" | grep '/usr/bin/ipfs daemon' | wc -l)" -gt 0 ] || fail "ipfs is not running for user '$ipfs_user'" 151
[ $(mount -l | grep "/dev/fuse on "$ipns_mount" type fuse" | wc -l) -eq 1 ] || fail "ipns is not mounted on configured location" 152

# end of config check

# get a lock on pacman's database
if { set -C; 2>/dev/null >$pacman_lock; }; then
	trap 'rm -f "$pacman_lock"' EXIT
else
	echo "pacman_ipfs_sync: pacman's db lock is already set" >&2
	exit
fi

cd "$pacman_cache"

while IFS= read -r -d $'\0' filename; do
	[ -z "$filename" ] && continue
	[[ "$filename" == *.part ]] && continue #skip partial downloads
	[[ "$filename" == *.sig ]] && continue #skip signature files
	echo "adding pkg from local cache to ipfs: $filename"
	su "$ipfs_user" --login -c "ipfs add --silent --raw-leaves --pin=0 \"$pacman_cache/$filename\" > /dev/null 2>&1"
	if [ $SKIP_CACHE_WIPE -eq 0 ]; then
		rm "$filename"
	fi
done < <(find . -maxdepth 1 -type f  -print0)

[ $SKIP_DB_SYNC -eq 1 ] && exit 0

printf "accessing dbs on ipfs://pkg.pacman.store, this might take a while..."
	cd "$ipns_mount/pkg.pacman.store/$dist_id/$arch_id/$repo_id/db/" >/dev/null 2>&1 || fail "could not access the configured subdirectory of /ipns/pkg.pacman.store" 200 -2n
echo " completed."

grep '^\[' < "$pacman_conf" | grep -v '^\[options\]$' | sed 's/\[//g' | sed 's/\]//g' | while IFS= read -r active_repo; do
	[[ ! " ${repos_to_sync[*]} " =~ $active_repo ]] && continue

	old_db_fullpath="${pacman_db}/sync/${active_repo}.db"
	new_db_filename="${active_repo}.db"

	[ ! -f "$old_db_fullpath" ] && fail "could not locate '$new_db_filename' in pacman's db path"

	if [ ! -f "$new_db_filename" ]; then
		echo "Warning: could not locate db file '$new_db_filename' on ipfs, SKIPPING"
		continue
	fi

	old_size="$(du --apparent-size --block-size=1 "$old_db_fullpath" | awk '{print $1}')"
	new_size="$(du --apparent-size --block-size=1 "$new_db_filename" | awk '{print $1}')" || fail "error while fetching filesize for '$new_db_filename' from ipfs"

	[ "$old_size" -eq "$new_size" ] && continue
	printf "receiving '%s'..." "$new_db_filename"
	cp -ax "$new_db_filename" "${old_db_fullpath}.part" || fail "error while receiving db file for '$new_db_filename' from ipfs" -n
	chmod --reference="$old_db_fullpath" "${old_db_fullpath}.part"
	sync "${old_db_fullpath}.part"
	mv "$old_db_fullpath" "${old_db_fullpath}.old"
	sync "$old_db_fullpath" "${old_db_fullpath}.old"
	mv "${old_db_fullpath}.part" "$old_db_fullpath"
	sync "${old_db_fullpath}.part" "$old_db_fullpath"
	echo "completed."
done
