# setup client

# known limitations:
# - when accessing ipns via fuse, you're unable to publish new ipns records (last checked ipfs v0.4.22)
#   you can temporarily unmount /mnt/ipfn to publish a new record and remount it afterwards
# - since IPFS is just mirroring off mirrors already existing, we add delay to updates
# - the current implementation of fuse mounts in IPFS is considered unstable (last checked ipfs v0.4.22)
# - IPFS is considered alpha software (last checked ipfs v0.4.22)
# - the caching algorithm currently implemented in IPFS might not be optimal (last checked ipfs v0.4.22)
# - currently only the arch x86_64 is available on the cluster
# - all pkgs/dbs/isos are only hold for two month inside the cluster, so entries in the archive might not be available afterwards (true@2020-01-24)
#   you can help make them available for longer by just pinning individual files on your client
#   you can become a cluster follower, if you want to also share active data (creates a lot of traffic)
#      this allows us to set the pin expire dates on the cluster as a whole longer, since we have more space available

#install:
bindfs
ipfs

# edit /etc/fuse.conf
uncomment "user_allow_other"

# you might want to setup the following with a custom user like 'ipfs'

sudo mkdir /mnt/ipfs
sudo mkdir /mnt/ipns

sudo chown <username> /mnt/ipfs
sudo chown <username> /mnt/ipns

# to run ipfs your user account edit the ipfs@.service file as root:

systemctl edit ipfs@.service

# add the following lines to the empty file:
[Unit]
After=network.target

[Service]
ExecStart=
ExecStart=/usr/bin/ipfs daemon --enable-pubsub-experiment --enable-namesys-pubsub --enable-mplex-experiment
#

# custom options in service file:
# - pubsub-experiment       = a service to exchange messages inside ipfs, subscription based (similar to multicast)
# - namesys-pubsub          = uses pubsub messages to speed-up name-lookups (something similar to dns (with dnssec) on the internet)
# - enable-mplex-experiment = FIXME: some pixie magic


### first of ipfs to init the settings and databases ###

ipfs init --empty-repo

# custom options on first start:
# - empty-repo       = no help files as default content

# change the default config for best performance:

# faster name resolution
ipfs config Pubsub.Router gossipsub

# more secure handshakes (perfect forward secrecy) - next major version will remove the less secure variant
ipfs config --json Experimental.PreferTLS true

# use QUIC/ip if possible instead of tcp - allows for multiplexing and lower overhead
ipfs config --json Experimental.QUIC true

# by default IPFS will search for other computers in your network and connect to them
# in rare cases you might want to deactivate this by running:
ipfs config --json Discovery.MDNS.Enabled false

# default data storage size is 10G in the folder ~/.ipfs if you prefer to store ~/.ipfs somewhere else, move the folder now.
# change the .service file created earlier - add the definition of the envoiment variable under [Service]:
Environment=IPFS_PATH=/your/custom/path/

#if you added the envoironment variable make sure to reload the service file:
systemctl --user daemon-reload

# change the default storage size if needed (in this example to 100 GB)
ipfs config --json Datastore.StorageMax '"100GB"'

# increase the GracePeriod (minimum time before a new connection gets terminated)
ipfs config --json Swarm.ConnMgr.GracePeriod '"3m"'

# enable nat traversal and relay services if you use NAT (and don't have any IPv6 connectivity)
ipfs config --json Swarm.EnableAutoNATService 'true'
ipfs config --json Swarm.EnableAutoRelay 'true'

### time to start and enable the service ###

systemctl enable --now ipfs@<username>


# now add the content of the pacman local cache to your ipfs for caching purposes:
# - this allows you and other people to access your already downloaded files via IPFS

# you might need to customize the program's settings for your installation

run as root: ./pacman_ipfs_sync --skip-db-sync --cache-wipe

# create a folder where pacman should access the ipfs
sudo mkdir /mnt/pacman_cache/
sudo chown $user /mnt/pacman_cache/

# use binfs to mount the path presented by ipfs in '/ipfn' to a custom path (necessary because of pacman limitations: Pacman refuses to change into a directory which doesn't exist)

bindfs /mnt/ipfn/pkg.pacman.store/arch/x86_64/default/ /mnt/pacman_cache

# add /pacman_cache to /etc/pacman.conf - a line below the regular cache dir
CacheDir = /mnt/pacman_cache/

### receive database updates from ipfs ###
# - this avoids having slightly newer db files which don't match the pkg files stored on IPFS yet
# - allows for distributed shared of db files
# - allows computers on your local network (which all runs IPFS) to receive the db files locally too)

# regular sync of the repos available on pkg.pacman.store need to be deactivated:
# - add to e.g. [core], [extra], [community] and [multilib] this line

Usage = Search Install Upgrade

# add custom configuration line to your pacman.conf, which defines which dbs will be synced from ipfs
# - make sure to start the line with exactly '#IPFS_SYNC'

# make sure to update the dbs EITHER via http OR ipfs
# - USING BOTH WILL LEAD TO VERSIONS JUMPING FORWARDS AND BACKWARDS
# - USING NONE WILL CUT YOU OFF OF ANY UPDATES INCLUDING SECURITY UPDATES

echo "#IPFS_SYNC = core extra community multilib" > sudo tee -a /etc/pacman.conf

# Because alpm-hooks don't allow hooks to be triggered on sync, we have to build a wrapper around the pacman call
# This script needs to be placed in the ~/.bashrc of the root user.
#
# ONLY USE THIS OPTION WHEN YOU UNDERSTAND THE SOURCE CODE OF THIS SCRIPTS
# AND IF YOU'RE FULLY AWARE THAT A BUG MIGHT SET YOUR KITTY ON FIRE!

# install pacman ipfs sync script in /root/bin/
sudo mkdir /root/bin/
sudo cp ./pacman_ipfs_sync /root/bin/

# install pacman wrapper in root's bashrc:
cat ./pacmanwrapper-for-bashrc.sh | sudo tee -a /root/.bashrc


